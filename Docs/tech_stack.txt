1. Персистентное хранилище чеков

a) Clickhouse

Изначальная задумка была в быстром считывание больших батчей информации, который
как раз может позволить нам ClickHouse. Но в действительности он
плохо заточен под транзакционные запросы (которые нам нужны), мы можем настроить 
запрос под считывание поитемарно, но это будет немного неэффективно, 
непроизводительно. Замечание дельное, нам может не хватить оперативки эти батчи 
держать в памяти при обучение

Плюсы:

a1) поддерживаемость
b1) интеграция
с1) хорошее сжатие данных

b) Postgresql

Действительно, если мы будем доставать все либо почти все данные которые вероятно 
не влезут в оперативку, соответственно большой разницы может и не быть, учитывая 
простоту, построчных бд и еще более простую интеграцию предпочтение отойдет им. 
Плюс время на запрос будет значительно меньше чем время на обучение, то есть
можно пренебречь Clickhouse'ом, к тому же мы будем часто кидать запросы поэлементно
и вытаскивать потихоньку


2. NoSql - база, для быстрого доступа к данным, типа расстояний между айтемами, 
предрасчитанных кластеров и статистик (храним готовые результаты которые 
дублируются в персистентую базу)

a) Предлагается Elasticsearch (inMemory - NoSQL)

В виду удобной фильтрации, и удобно построенных индексов
Также может использоваться для запросов на рекомендации


3. AirFlow - удобный продуктовый конструктор пайплайнов 
(alternatives : Luigi, Pinball)

use-cases:

a) mail.ru group (https://habr.com/ru/company/mailru/blog/344398/)
b) lyft (https://eng.lyft.com/running-apache-airflow-at-lyft-6e53bb8fccff)
c) google (https://en.paradigmadigital.com/dev/apache-airflow/)
d) ivi (https://habr.com/ru/company/ivi/blog/456630/)



etl до postgres (обсудить)
pyspark











